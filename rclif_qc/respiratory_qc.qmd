---
title: "Respiratory support QC report"
format: html
editor: visual
---

# Introduction

Running this notebook on your RCLIF database performs a series of QC checks that (eventually) focus on the internal consistency of the respiratory support table. It is designed to help you quality check a fully set up `clif_respiratory_support` table.

## Required Libraries

Note: check that `here()` successfully identifies your CLIF folder

```{r}
library(knitr)
library(here)
library(tidyverse)
library(arrow)
```

## Load in RCLIF tables

Add your CLIF tables to the `rclif` subfolder.

To do:

-   render the report as \`respiratory_qc\_\<site\>.html\`

```{r}
tables_location <- 'rclif'
site <-'UCMC'
table_path <- here(tables_location)
file_type <- "parquet"
```

```{r}
# List all CLIF files
clif_table_filenames <- list.files(path = table_path, 
                                   pattern = paste0("^clif_.*\\.",file_type, "$"), full.names = TRUE)

# Read all CLIF files into a list of data frames and then extract
if (file_type == "parquet") {
  data_list <- lapply(clif_table_filenames, read_parquet)
} else if (file_type == "csv"){
  data_list <- lapply(clif_table_filenames, read_csv)
} else if (file_type == "fst"){
  data_list <- lapply(clif_table_filenames, read.fst)
} else {
  stop("Unsupported file format")
}

for (i in seq_along(clif_table_filenames)) {
  # Extract the base name of the file (without extension)
  object_name <- str_remove(basename(clif_table_filenames[i]), "\\.parquet$")
  # Make the object name valid for R (replace invalid characters with underscores)
  object_name <- make.names(object_name)
  # Assign the tibble to a variable with the name of the file
  assign(object_name, data_list[[i]])
}
```

# Sort each table by encounter and time

```{r}
clif_respiratory_support <- clif_respiratory_support %>% 
  arrange(encounter_id, recorded_dttm)

# clif_vitals <- clif_vitals %>% arrange(encounter_id, recorded_dttm)
# 
# clif_scores <- clif_scores %>%
#   arrange(encounter_id, score_time)
# 
# clif_medication_admin_continuous <- clif_medication_admin_continuous %>%
#   arrange(encounter_id, admin_dttm)
# 
# clif_labs <- clif_labs %>%
#   arrange(encounter_id, lab_collect_dttm)
# 
# clif_adt <- clif_adt %>% arrange(encounter_id, in_dttm)
# 
# clif_dialysis <- clif_dialysis %>% arrange(encounter_id, start_dttm)
```

# General quality checks

### `device_name` to `device_category` mapping

```{r}
clif_respiratory_support %>%
  #filter(device_category %in%) %>%
  group_by(device_category) %>%
  count(device_name) %>%
  filter(n > 100) %>%
  arrange(device_category, -n) %>%
  kable()
```

This simple mapping check revealed a few mapping errors for U of C. The chunk below fixes these, but this should appear in your pre-CLIF script that constructs `clif_respiratory_support`. This exercise also demonstrates the utility of keeping the "raw" `device_name` variable in CLIF.

```{r}
clif_respiratory_support <- clif_respiratory_support %>%
  mutate(
    device_category = case_when(
      device_name == "NIPPV" & device_category != "Vent" ~ "NIPPV",
      (device_category %in% c("Nasal Cannula", "Other") & str_detect(device_name, "Face Tent")) ~ "Face Mask",
      (device_category %in% c("Nasal Cannula", "Other") & str_detect(device_name, "NRB Mask")) ~ "Face Mask",
      TRUE ~ device_category
    )
  )
```

### Re-check post-fix

```{r}
clif_respiratory_support %>%
  #filter(device_category %in%) %>%
  group_by(device_category) %>%
  count(device_name) %>%
  filter(n > 100) %>%
  arrange(device_category, -n) %>%
  kable()
```

# `Nasal Cannula` quality checks

```{r}
# Function to calculate summary statistics
calc_summary_stats <- function(df, var) {
  data <- df[[var]]
  median_val <- median(data, na.rm = TRUE)
  p25_val <- quantile(data, 0.25, na.rm = TRUE)
  p75_val <- quantile(data, 0.75, na.rm = TRUE)
  min_val <- min(data, na.rm = TRUE)
  max_val <- max(data, na.rm = TRUE)
  missing_pct <- mean(is.na(data)) * 100
  return(c(percent_missing = missing_pct,
           median = median_val, p25 = p25_val, p75 = p75_val, 
           min = min_val, max = max_val))
}

# List of variables to summarize
variables <- c("fio2_set", "lpm_set", "tidal_volume_set", "resp_rate_set",
               "pressure_control_set", "pressure_support_set", "flow_rate_set",
               "peak_inspiratory_pressure_set", "inspiratory_time_set", "peep_set",
               "tidal_volume_obs", "resp_rate_obs", "plateau_pressure_obs",
               "peak_inspiratory_pressure_obs", "peep_obs", "minute_vent_obs")

summary_table <- function(device, mode = NA){
  # Initialize an empty list to store the results
  summary_stats <- list()
  
  
  # Loop through each variable and calculate the summary statistics
  
  if (is.na(mode)) {
    filtered_df <- clif_respiratory_support %>% filter(device_category == device)
  } else {
    filtered_df <- clif_respiratory_support %>% 
      filter(device_category == device & mode_category == mode)
  }
  for (var in variables) {
    summary_stats[[var]] <- calc_summary_stats(filtered_df, var)
  }
  
  # Convert the list to a data frame for better display
  summary_stats_df <- do.call(rbind, summary_stats) %>%
    as.data.frame() %>%
    rownames_to_column(var = "Variable")
  
  # Format the table for a Quarto document
  kable(summary_stats_df, caption = paste0("Summary Statistics when device_category = ", device),
        col.names = c("Variable", "% Missing", "Median", "25th Percentile", "75th Percentile",
                        "Min", "Max"),
        digits = 2)
}

summary_table("Nasal Cannula")
```

As expected, LPM is the only value routinely documented when `device_category == "Nasal Cannula`.

# `High Flow NC` quality checks

```{r}
summary_table("High Flow NC")
```

Same results for `device_category == "High Flow NC"`.

# `NIPPV` quality checks

## `device_name` to `device_category` mapping

```{r}
clif_respiratory_support %>%
  filter(device_category %in% c("NIPPV", "CPAP")) %>%
  group_by(device_category) %>%
  count(device_name) %>%
  filter(n > 100) %>%
  kable()
```

## `mode_name` to `mode_category` mapping for `CPAP` for `NIPPV`

```{r}
clif_respiratory_support %>%
  filter(device_category %in% c("NIPPV", "CPAP")) %>%
  group_by(device_category, mode_category) %>%
  count(mode_name) %>%
  arrange(device_category, -n) %>%
  filter(n > 100) %>%
  kable()
```

"BiPAP" should be mapped to "Pressure Support/CPAP"

### Temporary fix for BiPAP

this should be "pre-CLIF", so this code chunk would appear in the `clif_respiratory_support` setup pipeline script

```{r}
clif_respiratory_support <- clif_respiratory_support %>%
  mutate(mode_category = ifelse(mode_name == "BiPAP" & 
                                  device_category %in% c("NIPPV", "CPAP"), 
                                "Pressure Support/CPAP", mode_category))
```

```{r}
clif_respiratory_support %>%
  filter(device_category %in% c("NIPPV", "CPAP")) %>%
  group_by(device_category, mode_category) %>%
  count(mode_name) %>%
  arrange(device_category, -n) %>%
  filter(n > 100) %>%
  kable()
```

## CPAP summary table

```{r}
summary_table("CPAP")
```

We've identified a mapping issue for `device_category == "CPAP"`, the EPAP is not being mapped correctly to `peep_set`

## NIPPV summary table

```{r}
summary_table("NIPPV")
```

```{r}
clif_respiratory_support %>%
  filter(device_name == "NIPPV") %>%
  group_by(encounter_id) %>%
  mutate(min_time = min(recorded_dttm),
         time = difftime(recorded_dttm, min_time, units = "hours")) %>%
  select(encounter_id, time, mode_category, fio2_set, peep_set, pressure_support_set)  %>%
  head(n = 20) %>%
  kable()
```

### Encounter level missingness of `pressure_support_set` and `peep_set` for encounters receiving `NIPPV`

```{r}
clif_respiratory_support %>%
  filter(device_name == "NIPPV") %>%
  group_by(encounter_id) %>%
  summarise(mean_peep_set = mean(peep_set, na.rm = TRUE),
            mean_pressure_support_set = mean(pressure_support_set, na.rm = TRUE)) %>%
  ungroup() %>%
  summarise(missing_peep = mean(is.na(mean_peep_set))*100,
            missing_pressure_support_set = mean(is.na(mean_pressure_support_set))*100)  %>%
  kable()
```

We likely have mapping issues with `NIPPV` as well, as we have high levels of complete missingness for PEEP and Pressure support. I assume there are `EPAP` and `IPAP` fields we haven't mapped properly

# Ventilator data QC

First we identify `encounter_id`s where the patient was on a Vent at some point

```{r}
encounters_w_vent <- clif_respiratory_support %>%
  filter(device_category == "Vent") %>%
  pull(encounter_id) %>%
  unique()
```

Extract the entire respiratory support table for these patients

```{r}
vent_resp_tables <- clif_respiratory_support %>%
  filter(encounter_id %in% encounters_w_vent) 


vent_resp_tables <- vent_resp_tables %>%
  group_by(encounter_id) %>%
  mutate(min_time = min(recorded_dttm),
         time = difftime(recorded_dttm, min_time, units = "hours")) %>% 
  ungroup() %>%
  select(-recorded_dttm, -min_time) %>%
  select(patient_id, encounter_id, time, everything())
```

## `mode_name` to `mode_category` mapping for `device_name == "Vent"`

```{r}
vent_resp_tables %>%
  group_by(mode_category) %>%
  count(mode_name) %>%
  arrange(mode_category, -n) %>%
  kable()
```

Our `mode_name` to `mode_category` mapping looks good. Looks like `NAVA`is popular on the peds side at UCMC..

## Mode Specific QC checks

### Assist Control-Volume Control

```{r}
summary_table("Vent", "Assist Control-Volume Control")
```

Very low levels of missingness at UCMC, seems like most parameters you expect are recorded simultaneously.

### Pressure Support/CPAP

```{r}
summary_table("Vent", "Pressure Support/CPAP")
```

### Pressure Control

```{r}
summary_table("Vent", "Pressure Control")
```

### SIMV

```{r}
summary_table("Vent", "SIMV")
```

## Visualization of respiratory course

These visualizations are meant to QC check several individual patients course

```{r}
ecounters_to_check <- encounters_w_vent[c(1,100,700)]
```

```{r}
vent_resp_tables %>%
  filter(encounter_id == encounters_w_vent[1])
```

```{r}
visualize_patient_course <- function(e_id){
  dispo <- clif_encounter_demographics_dispo %>%
  filter(encounter_id == e_id) %>%
  pull(disposition_category)

vent_resp_tables %>%
  mutate(device_category = factor(device_category, levels = c("Vent", "NIPPV", "CPAP", "High Flow NC", "Nasal Cannula", "Room Air"))) %>% 
  filter(encounter_id == e_id) %>%
  fill(device_category, .direction = "down" ) %>% 
  fill(mode_category, .direction = "down" ) %>% 
  filter(is.na(device_category) == FALSE) %>% 
  mutate(mode_category = ifelse(device_category %in% c("High Flow NC", 
                                                    "Nasal Cannula",
                                                   "Room Air"), NA, mode_category)) %>%
  ggplot(aes(x = time, 
             y = device_category,
             color = mode_category,
             fill = mode_category)) +
  geom_tile(width = 1) +
  ggthemes::theme_gdocs() + 
  theme(legend.position = "bottom",
        legend.direction = "horizontal", 
        legend.box = "horizontal",
        legend.text = element_text(size = 8),
        legend.title = element_text(size = 10)) + 
  labs(color = "", fill = "", x = "hours since respiratory support first documented",
       title = paste0("Patient disposition = ", dispo)) 
}

visualize_patient_course(encounters_w_vent[1])
```

```{r}
visualize_patient_course(encounters_w_vent[100])
```

```{r}
visualize_patient_course(encounters_w_vent[700])
```

# Exploratory analyses of ventilator data

## initial mode choice for mechanical ventilation

```{r}
vent_resp_tables %>%
  group_by(encounter_id) %>%
  filter(is.na(mode_category) == FALSE) %>%
  filter(row_number() ==1) %>%
  ungroup() %>%
  count(mode_category) %>%
  arrange(-n)  %>%
  kable()
```

## LTTV hours

Ideal body weight (IBW) (men) = 50 kg + 2.3 kg x (height, in - 60) Ideal body weight (IBW) (women) = 45.5 kg + 2.3 kg x (height, in - 60)

Pai MP, Paloucek FP. The origin of the "ideal" body weight equations. Ann Pharmacother. 2000 Sep;34(9):1066-9. doi: 10.1345/aph.19381. PMID: 10981254.

Authors Note: need to QC the IBW calculator! Seems super out of date...need to advance the field here, what a joke. This is exactly why we need CLIF.

```{r}
first_height <- clif_vitals %>%
  filter(encounter_id %in% encounters_w_vent) %>%
  filter(vital_name == "HEIGHT") %>%
  arrange(encounter_id, recorded_dttm) %>%
  group_by(encounter_id) %>%
  filter(row_number() ==1)

first_height <- first_height %>%
  select(encounter_id, vital_name, vital_value) %>%
  pivot_wider(names_from = "vital_name", values_from = "vital_value")
```

### Overall cc/(kg IBW) distribution for VC

```{r}
## note this works if height is in INCHES
IBW <- function(height, sex) {
  case_when(
    sex == "Male" ~ 50 + 2.3 * (height - 60),
    sex == "Female" ~ 45.5 + 2.3 *(height - 60),
  )
}


vent_resp_tables %>%
  filter(mode_category == "Assist Control-Volume Control")%>%
  left_join(first_height) %>%
  left_join(clif_patient_demographics %>% select(encounter_id, sex)) %>%
  mutate(ideal_wt_kg = IBW(HEIGHT, sex),
         tv_per_kg_ibw = tidal_volume_set/ideal_wt_kg,
         vt_bin = cut(tv_per_kg_ibw, breaks = c(0, 4, 6, 7, 8, 9, 10, 15))) %>%
  filter(tidal_volume_set > 0 & ideal_wt_kg > 0 & tv_per_kg_ibw < 15) %>%
  ggplot(aes(x= tv_per_kg_ibw, fill = vt_bin)) +
  geom_histogram(aes(y = (..count..) / sum(..count..) * 100),binwidth = 1, boundary = 0) + 
  scale_fill_brewer(palette = "RdBu", direction = -1) +
  ggthemes::theme_gdocs() +
  labs(x= "TV cc/kg IBW", y = "Patient hours")
```

### cc/(kg IBW) distribution by sex

```{r}
vent_resp_tables %>%
  filter(mode_category == "Assist Control-Volume Control")%>%
  left_join(first_height) %>%
  left_join(clif_patient_demographics %>% select(encounter_id, sex)) %>%
  mutate(ideal_wt_kg = IBW(HEIGHT, sex),
         tv_per_kg_ibw = tidal_volume_set/ideal_wt_kg,
         vt_bin = cut(tv_per_kg_ibw, breaks = c(0, 4, 6, 7, 8, 9, 10, 15))) %>%
  filter(tidal_volume_set > 0 & ideal_wt_kg > 0 & tv_per_kg_ibw < 15) %>%
  ggplot(aes(x= tv_per_kg_ibw, fill = vt_bin)) +
  geom_histogram(binwidth = 1, boundary = 0) + 
  scale_fill_brewer(palette = "RdBu", direction = -1) +
  ggthemes::theme_gdocs() +
  labs(x= "TV cc/kg IBW", y = "Patient hours") +
  facet_wrap(~ sex)
```

### Percentage of patient hours for `sex == Male`

```{r}
vent_resp_tables %>%
  filter(mode_category == "Assist Control-Volume Control")%>%
  left_join(first_height) %>%
  left_join(clif_patient_demographics %>% select(encounter_id, sex)) %>%
  filter(sex == "Male") %>%
  mutate(ideal_wt_kg = IBW(HEIGHT, sex),
         tv_per_kg_ibw = tidal_volume_set/ideal_wt_kg,
         vt_bin = cut(tv_per_kg_ibw, breaks = c(0, 4, 6, 7, 8, 9, 10, 15))) %>%
  filter(tidal_volume_set > 0 & ideal_wt_kg > 0 & tv_per_kg_ibw < 15) %>%
  ggplot(aes(x= tv_per_kg_ibw, fill = vt_bin)) +
  geom_histogram(aes(y = (..count..) / sum(..count..) * 100),
                 binwidth = 1, boundary = 0) + 
  scale_fill_brewer(palette = "RdBu", direction = -1) +
  ggthemes::theme_gdocs() +
  labs(x= "TV cc/kg IBW", y = "% patient hours")
```

### Percentage of patient hours for `sex == Female`

```{r}
vent_resp_tables %>%
  filter(mode_category == "Assist Control-Volume Control")%>%
  left_join(first_height) %>%
  left_join(clif_patient_demographics %>% select(encounter_id, sex)) %>%
  filter(sex == "Female") %>%
  mutate(ideal_wt_kg = IBW(HEIGHT, sex),
         tv_per_kg_ibw = tidal_volume_set/ideal_wt_kg,
         vt_bin = cut(tv_per_kg_ibw, 
                      breaks = c(0, 4, 6, 7, 8, 9, 10, 15))) %>%
  filter(tidal_volume_set > 0 & ideal_wt_kg > 0 & tv_per_kg_ibw < 15) %>%
  ggplot(aes(x= tv_per_kg_ibw, fill = vt_bin)) +
  geom_histogram(aes(y = (..count..) / sum(..count..) * 100),
                 binwidth = 1, boundary = 0) + 
  scale_fill_brewer(palette = "RdBu", direction = -1) +
  ggthemes::theme_gdocs() +
  labs(x= "TV cc/kg IBW", y = "% patient hours")
```

Sex disparity in TV apparent!

# TO DO

-   define a `device_session` and check for missingness across it
-   code up an Spontaneous breathing trial identifier
